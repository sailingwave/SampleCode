#!/bin/bash
#PBS -l walltime=6:00:00
#PBS -l nodes=1:ppn=8
#PBS -l mem=8gb
#PBS -M sailingwave@gmail.com
#PBS -N gwas_chr22_7
#PBS -j oe
#PBS -q conti
#PBS -A lc_dvc

#=========================#
# v2.04
# updated: 11/28/2014
# changed login1 to login2 after hpcc maintenance.
# allow more than one node by modifying the temp dir path 
# split the genotype file into chunks of 50k SNPs, so this script was modified accordingly
#
# v2.03
# updated: 08/02/2013
# changed how monomorphic is detected for lm/glm models.
#
# v2.02  updated:02/17/2013
# change the way this script sort files (from general-numeric to alphabetical).
#
# v2.01
# Used separate folders for storing the pedigree file and the phenotype file. Added an function to check the file transfering temp folder for existence. Changed the default pedigree file name. Renamed this script file from assoc_hpcc_v2.pbs to gwas_assoc_v2.01.pbs.
#
# Version 2.0
# -----------
# Dropped unused functions,optimize codes,added a function to sort files by id before joining them to form the phenotype file,added a mailing option,added a debug option,added a file storage server detection function, added function of wald's test in addition to LRT.
# updated: 01/18/2013
#
#=========================#
# Run in temp dir to drop disk I/O burden.
# updated: 05/10/2012
# Fix (cancel) the correction for ascertainment.Drop one asian from analysis.
# updated: 05/09/2012
# Run solar regression jobs in parallel.
# updated: 03/14/2012
# make dir on the destiny server(biolinux2),each trait has a separate folder. Output file contains the jobid of hpcc.
# created: 03/08/2012
# Now it's important to change the PBS options,since some of the vars in the pbs file come from these options.e.g. job name,ppn.
#=========================#

#=========================#
# How to use this script:
# -----------------------
# 1. According to your need,modify the PBS arguments,as the starting several lines of this script file, note:
#  1.1 usually, do not change the name ("#PBS -N" option);if modified,please keep the "chrxx" part.
#  1.2 if using our node, specify "#PBS -q watt",and set ppn=24.
#  1.3 if using public node, delete "#PBS -q watt" or change it to  "#noPBS -q watt", and set ppn=8 (I suppose majority of hpcc nodes are of this type).
# 2. If necessary, modify the arguments listed in the following 'argument setting' section, especially the 'more frequently changed arguments' part.
# 3. Qsub & good luck!
# ps: usually this script is called using another bash script "multi_job.sh", achieving multiple submissions.
#=========================#

#=========================#
# Preparations before using this script:
# 1. You need to have a phenotype file,with the 1st column being the 'id',the following columns are for each trait residuals. Make sure you already adjust for age,sex,(bmi or pfat),and populatioin structure fractions.
# 2. You need to have a pedigree file, several marker files organized by each chromosome (typically already provided).
# 3. You need to set up path on your file storing server (i.e. biolinux2) for storing the result files and output files. Also change the corresponding arguments accordingly. Seperate folders for each model,adjustment and trait will be automatically generated by this script.
# 4. You need to set up direct ssh w/o password to your file storing server (i.e. biolinux2) on hpc-login1,using the ssh-keygen command on hpc-login1. Google it or ask Nan for details.
#=========================#



#====== Script Start ======#

source /etc/profile


#====== Argument setting ======#
#---- by default ----#

chr=`echo $PBS_JOBNAME|sed 's/.*\(chr[^_]*_[0-9]*\).*/\1/'`
jobid=`echo $PBS_JOBID|sed 's/\([0-9]*\).*/\1/'`    #the id number of jobid
parll_lim=$(($PBS_NUM_PPN*$PBS_NUM_NODES))  #the number of parallelization,which is equal to the number of cores

pbsdir="$PBS_O_WORKDIR"    #where the pbs & sh script files are
[ $PBS_NUM_NODES -eq 1 ] && wkdir="/tmp/association" || wkdir="/scratch/association"    #where all the work are processed,temp folder by each node
server="biolinux2"    #name of the server where to put all the result & output files

starttime=`date`

#---- by user ----#
#-more frequently changed arguments
adj="asb"    #adjustment,age-sex as "as",age-sex-bmi as "asb",age-sex-pfat as "asp"
model="add"    #the model,additive as "add", dominant as "dom", recessive as "rec"
trait='sqrtair_r'    #traits being analyzed
covar=''    #list of covariates used in solar script,separated by space

#-typically set for once
testype=1    #type of association test: 1 as LRT, 2 as Wald's test

phendir="/home/rcf-40/wangn/second_GWAS/betagene"    #where your phenotype file is (with residuals)

phenfile="pheno_bg_${adj}_150127.csv"    #the phenotype file that need to be combined with marker files, to generate the final 'phenotype' file for solar

tardir="~/work/second_GWAS/results/assoc_carl_imp/betagene"    #the dir on $server to store all the files generated during the analysis
outdir="$tardir"    #the dir on $server to store the output and summarized results
dirname="$trait"    #the folder name on $server for storing the results(tar&output),typically identical to $trait for convenience

user='wangn'    #user name for $server,hint: usc user name
mailadd='sailingwave@gmail.com'    #email address that the a notification is sent to after finishing the job

#-default arguments that almost never need to be changed
peddir="/home/rcf-proj/rmw/wangn/association"    #where the pedigree file is
mkrdir="/home/rcf-proj/rmw1/wangn/second_gwas/imputed_from_carl/betagene/$model/done/"    #where the marker files are
tmpdir="/home/rcf-proj/rmw/BetaGene_Tripod_GWAS/temp_files/$user"    #temp dir to temporarily store files for transfer back to $server

pedfile='betagene_0227.ped'    #pedigree file for solar
pref="betagene_${model}_imp_trp_141124_"    #the prefix of marker file: from beginning to where the "chrxx" starts;don't forget the suffix
suff=".csv.gz"    #the suffix of marker file
mkrfile="$pref$chr$suff"    #the name of the marker file

#---- job control ----#
mail=0    #whether send email notification after finishing the job, 1 or 0
debug=0    #debug mode: do not delete the intermediate files, 1 or 0


#====== check  ======#
#---- necessary files ----#

if [ ! -e $peddir/$pedfile ] || [ ! -e $phendir/$phenfile ] || [ ! -e $mkrdir/$mkrfile ]; then
    echo "Make sure your input files (pedigree,phenotype,marker) exist!"
    exit
fi

#---- file storage server ----#

if [ `ssh hpc-login2 "ssh $server '[ ! -e $outdir ]'"` ] || [ `ssh hpc-login2 "ssh $server '[ ! -e $tardir ]'"` ] ;then
    echo "Make sure your file storage path is valid!"
    exit
fi

tardir="$tardir/$model/$adj"
outdir="$outdir/$model/$adj"

#---- file transfering temp folder ----#

if [ ! -e $tmpdir ];then
    echo "Make sure your file transfering temp folder path is valid!"
    exit
fi

#---- arguments ----#

if [ "$testype" != "1" -a "$testype" != "2" ];then
    echo "Make sure your setting of test type is correct!"
    exit
fi

#====== PBS job decription ======#

echo ""
echo "Jobid: $PBS_JOBID"
echo "Model: $model"
echo "Adjust: $adj"
echo "Chr: $chr"
echo "Trait: $trait"
echo "Pedigree: $pedfile"
echo "Pheno: $phenfile"
echo "Marker: $mkrfile"
[ "$testype" == "1" ] && echo "Test: LRT" || echo "Test: Wald's test" 
echo "Job starts"
echo "------------------------"


#====== File preparation ======#

#---- pbs parallel files ----#

chrdir="${chr}_$jobid";    #dir name to differentiate different traits for each chr

cd $pbsdir

[ -e "$chrdir" ] || mkdir $chrdir

cd $chrdir


#one file needed for parallelization
cat > $pbsdir/$chrdir/assoc_pbsdsh.sh <<EOF
#!/bin/bash
cd $pbsdir/$chrdir
sh a_\$PBS_VNODENUM.sh
EOF

#---- ped&pheno file ----#

[ ! -e $wkdir ] && mkdir $wkdir
cd $wkdir

if [ ! -e $chrdir ]; then
    mkdir $chrdir

    cp $peddir/$pedfile $phendir/$phenfile $mkrdir/$mkrfile $chrdir/
fi
    
cd $wkdir/$chrdir

if [[ "$suff" =~ ".gz" ]];then
    gzip -d $mkrfile
    mkrfile=${mkrfile%.gz}
fi

[ -e $mkrfile ] && count=$((`cat $mkrfile | grep rs | tr -s , "\n" | wc -l`-1)) || exit   #take out the first line & calculate;'-1' because of the 'id' column

limit=$(($count/$parll_lim+1))    #the number of SNPs for each core

#---- prepare subset pheno files & pbsdsh files ----#
sed -i 's///g' $phenfile    #delete the tailing newline sign by windows
grep -v '^$' $phenfile | sort -t ',' -k 1,1 -g > ${phenfile}_sorted    #sort $phenfile by id

i=1    #counter for snps
j=1    #counter for subset marker files & subset pheno files
while [ "$i" -le "$count" ];do
    #split marker file
    [ "$(($i+$limit-1))" -gt "$count" ] && uplimit=$count || uplimit=$(($i+$limit-1))
    chr_sub="${chr}_$j"
    cut -d , -f 1,$(($i+1))-$(($uplimit+1)) $mkrfile > $chr_sub.mkr    #+1,because the 1st col is id
    join -t , -j 1 ${phenfile}_sorted $chr_sub.mkr > $chr_sub.phen    #this requires the 1st column of two files to be the same
    sed -n 1p $chr_sub.mkr | tr -s , "\n" | sed -n '2,$'p > _marker    #a list of markers,drop the 'id'
    rm $chr_sub.mkr
    
    #-- write perl script to generate solar script files --#
	
    cat > solar_script.pl<<EOF

#!/usr/bin/perl -w

use strict;

chdir "$wkdir/$chrdir/$chr_sub" or die;

open OUT,'>',"_solar.s" or die;    #solar script file

select OUT;

print "option modeltype evd\n";
print "load ped $pedfile\nload phen $chr_sub.phen\n";
print "field probnd -none\n";


open MKR,'<',"_marker" or die;

while (<MKR>){
    chomp;
    print "model new\ntrait $trait\n";
    print "covariate \$_ $covar\n";
    print "spormod\nmaxi\npolymod\nmaxi\n";
    print "set bsnp [parameter b\$_ =]\n";
    print "set bsnp_se [parameter b\$_ se]\n";

    if ($testype == 1){ 
        print "set withgene [loglike]\n";
        print "parameter b\$_ = 0\nconstraint b\$_ = 0\n";
        print "maxi\nset nogene [loglike]\n";
        print 'set chisq [expr 2 * (\$withgene - \$nogene)]'."\n";
        print "set df 1\nset pval [chi -number \\\$chisq \\\$df]\n";
        print "putsout \$_.res \\"\$_ $trait bsnp = \\\$bsnp  se = \\\$bsnp_se p = \\\$pval\\"\n\n";
    }else{    # $testype==2
        print 'set chisq [expr (\\\$bsnp*\\\$bsnp) / (\\\$bsnp_se*\\\$bsnp_se)]'."\n";
        print "set df 1\nset pval [chi -number \\\$chisq \\\$df]\n";
        print "putsout \$_.res \\"\$_ $trait bsnp = \\\$bsnp  se = \\\$bsnp_se p = \\\$pval\\"\n\n";
    }
}

close MKR;

select STDOUT;

close OUT;

EOF
    
    
    

    #------------------------------------------------------#    
   
    [ -e $chr_sub ] || mkdir $chr_sub
    cp $pedfile $chr_sub
    mv solar_script.pl _marker $chr_sub.phen $chr_sub

    #-- write paralellization files --#
    cat > $pbsdir/$chrdir/a_$(($j-1)).sh<<EOF
#!/bin/bash
PATH=$PATH:/home/rcf-proj3/rmw/bin
export PATH
echo "Processing $chr_sub ..."
cd $wkdir/$chrdir/$chr_sub
perl solar_script.pl


solar6 < _solar.s > output 2>&1

rm solar_script.pl _marker $pedfile
EOF
  
	i=$(($i+$limit))
	j=$(($j+1))
done

#--------------------------------------------------------#



#====== parallelization ======#

cd $pbsdir

pbsdsh -v sh $pbsdir/$chrdir/assoc_pbsdsh.sh

#=============================#



#====== Job done ======#

#---- job summarization & transfer files ----#

finishtime=`date`

cd $wkdir/$chrdir

echo "Job end: $finishtime" > output_${chr}_$jobid.txt
cat $chr*/output >> output_${chr}_$jobid.txt
gzip -9 output_${chr}_$jobid.txt 

echo -e "Job ID:$PBS_JOBID\tJob end: $finishtime" > result_${chr}_$jobid.txt
cat $chr*/$trait/*.res >> result_${chr}_$jobid.txt

gzip -9 result_${chr}_$jobid.txt

mv result_${chr}_$jobid.txt.gz output_${chr}_$jobid.txt.gz $tmpdir

ssh hpc-login2 "ssh $server 'mkdir -p $outdir/$dirname'" 
ssh hpc-login2 "scp $tmpdir/result_${chr}_$jobid.txt.gz $tmpdir/output_${chr}_$jobid.txt.gz $user@$server:$outdir/$dirname"


cd $wkdir

tar -zcf $chrdir.tar.gz $chrdir/
mv $chrdir.tar.gz $tmpdir

ssh hpc-login2 "ssh $server 'mkdir -p $tardir/$dirname'"
ssh hpc-login2 "scp $tmpdir/$chrdir.tar.gz $user@$server:$tardir/$dirname" && echo "Transferring files completed!"



if [ "$debug" == "0" ];then
    rm -rf $pbsdir/$chrdir
    rm $tmpdir/result_${chr}_$jobid.txt.gz $tmpdir/output_${chr}_$jobid.txt.gz
    rm $tmpdir/$chrdir.tar.gz
fi

rm -rf $wkdir/$chrdir



#---- finishing ----#

if [ "$mail" == "1" ];then
    ssh hpc-login1 "mail -s 'PBS association analysis for $chr done!' $mailadd<<EOF
jobid: $PBS_JOBID
trait: $trait
start: $starttime
finish: $finishtime
EOF"
fi

